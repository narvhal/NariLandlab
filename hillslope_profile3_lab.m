function [z,b] =hillslope_profile3(z,b)%% hillslope_profile is a generic 2-D hillslope profile evolution solver% hillslope_profile solves the eqns: qs = kx^ms^n ; dz/dt = -1/(1-porosity)*(dqs/dx)% soil production as well as transport may be modeled%% note  that s = -dz/dx (flow from left to right).% no flow and no sediment flux is assumed at the left boundary, i=1%% bcflag specifies variable boundary conditions at the right margin (toe of hill, i=Maxi)% bcflag 1: z(Maxi) = constant (all sediment carried away)% bcflag 2: z(Maxi) lowered at a constant rate (stream incision)% bcflag 3: zero slope at i=Maxi; zero flux (all sediment accumulates)%% icflag specifies initial conditions% icflag 1: option intial slope, w/o flats: a triangular ridge% icflag 2: option initial scarp in the midst of long flats above and below% icflag 3: option intial slope, w flats: a triangular ridge in the midst% of a plain.% icflag 4: use input vectors z, b for initial elevation and soil-rock interface%% wflag 1: do not compute weathering (transport limited)% wflag 2: compute weathering%% rflag = 2 is roering non-linear diffusion model(only for wflag=1 case for now)%% time step dt is determined from std advection-diffusion eqn stability (FTCS explicit)% possible stability problems when n > 1,% use stabil < 1 if problems arise.  stabil = 2.25 is max for n=1; m=1;% stabil = 3 is max for n=1, m=2.% for best stability with diffusion and non-linear diffusion (m=0) use CS in calc qs% and dqs/dx% for best stability with advection (m>0) use FS in calc qs but CS for% dqs/dx%% units: z [m], dx [m], timeyr [yr], k [m^(2-n)/yr], E [m/yr]; all time and rates in yr%	hold off%% define parameters%	n=2;	m=2;	timeyr=20000;    nplot=5;        % number of timesteps to plot	dx=.5;	bcflag=2;       % see header for info on boundary condition options    icflag=1;       % see header for info on initial condition options	wflag=1;        % wflag=2 (model soil production) is only intended (and tested) for diffusive hillslopes (m=0)    rflag=1;        % rflag=2 is roering non-linear diffusion model (m=0,n=1) (only for wflag=1 case for now)    Sc=0.85;        % threshold slope in the roering non-linear diffusion model	k=.0001;         % 0.005 is default for m=0. default for m=2 is 0.0001 (different process, different units = different k value)	porosity=0.0;   % use this if you want a porosity correction -- if k is calibrated on flux of sediment grains, not flux of soil	E=.0002;        % lowering rate for bcflag = 2 (stream incision)	Wd=2.3;         % decay constant in soil production function. 1/Wd is the e-folding depth, typically near 0.5 m	Ws=.001;        % surface (maximum) soil production rate [m/yr]    i_soil_h = 1;   % initial soil thickness    stabil = 1;% use stabil < 1 if problems arise with m not = 0.  stabil = 2.25 is max for n=1; m=1;% stabil = 3 is max for n=1, m=2. lines 120-127 define stabil2 = 0.95 for% m=0 case.%    %    Si = 0.8;           %set initial slope IF rflag=2 MUST be < Sc!!    L = 40 ;            %set slope length    z_min = 200;        %set initial baselevel    scarp_h = L*Si;     %calc initial scarp_h    z_max = z_min + scarp_h;%%   specify initial conditions if not specified in command line (e.g., [z2,b2]=hillslope_profile3(z1,b1))%%   option intial slope, w/o flats: a triangular ridge    if icflag == 1       z=[z_max:-(Si*dx):z_min];%%   option initial scarp in the midst of long flats above and below    elseif icflag == 2        z=[z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max,z_max:-(Si*dx):z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min];%%   option initial ridge with long flat below    elseif icflag == 3    z=[z_max:-(Si*dx):z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min,z_min];%       else % i.e., if icflag == 4%   %   do nothing -- use the z, b vectors input with command line >>hillslope_profile3(z,b);%    end%    if icflag<4         b=z-i_soil_h;    end    if wflag==1        b=z-i_soil_h;    end	h = z - b;    scarp_h = max(z) - min(z)    %    Maxi=length(z);	ax=(0:(Maxi-1)).*dx;	x=Maxi.*dx;%% compute dt for stability (first guess)%    if rflag == 2        stabil2 = .02;          % reduce from 0.95 to 0.02 for roering model if approaching angle of repose    else         stabil2 = .95;    end	if m==0		B=dx.*dx.*(1-porosity)./(2.*k);		dt=stabil2.*B             	else		A=2.*dx.*(1-porosity)./(k.*m.*x.^(m-1));		B=dx.*dx.*(1-porosity)./(2.*k.*x.^m);		dt=stabil.*min(A,B)	end%% compute constants%	k1 = -1.*k./(dx.^n);	k3 = dt./((1-porosity).*dx);    Scdx = 2.*dx.*Sc;%% determine # timesteps for the simulation and specify number of times % to output data%	nsteps = timeyr./dt	tplot=round(nsteps./nplot);%% initialize variables and compute x^n outside timeloops for maximized efficiency%	qs = zeros(size(z));	xm = zeros(size(z));	k1xm = zeros(size(z));%	for i = 1:Maxi		xm(i) = ((i-1).*dx).^m;	end	xm(1)=xm(1)+(.2.*dx);%	k1xm1 = k1.*xm(1);	k1xmm = k1.*xm(Maxi);	k1xm = k1*xm;%% plot z initial for reference and then loop over time t = 1:nsteps%	hold off	figure(1)	clf	plot(ax,z,'b')    hold on    set(gca,'xlabel',text(0,0,'distance (m)'))	set(gca,'ylabel',text(0,0,'elevation (m)'))%% only if computing soil production, plot soil-rock interface%    if wflag == 2        plot (ax,b,'k')        figure(5)        plot(ax,h,'b')        hold on        xlabel('distance (m)')        ylabel('soil thickness (m)')    end%% calc initial slope and curvature, plot (uncomment to plot)%        i=1;        s(i) = -1*(z(i+1) - z(i))/dx;        plot_s(i) = s(i);        for i = 2:Maxi-1            s(i) = -1*(z(i+1) - z(i-1))/(2*dx);            plot_s(i) = s(i);        end        i=Maxi;        s(i) = -1*(z(i) - z(i-1))/(dx);%               i=1;        cv(i) = -1*(s(i+1) - s(i))/dx;        for i = 2:Maxi-1            cv(i) = -1*(s(i+1) - s(i-1))/(2*dx);        end        %i=Maxi        %cv(i) = -1*(s(i) - s(i-1))/dx;%    figure(4)    clf%     plot (plot_s,cv,'m')    hold on%     xlabel('local slope (m/m)')%     ylabel('local curvature')%     title('Slope-curvature Plot')%% BEGIN BIG TIME LOOP%	for t = 1:nsteps%% first calc qs(i); BC -- no flow over ridge (i=1)%		if wflag==1			i=1;			if m==0				qs(i) = k1.*(z(i+1) - z(i)).^n;                Smax = abs((z(i+1)-z(i))/dx);                if rflag==2                    qs(i) = k1.*(z(i+1) - z(i)).^n*(1/(1-(abs(z(i+1) - z(i))/(Scdx./2))^2));                    Smax = abs((z(i+1)-z(i))/dx);                end			else				qs(i) = k1xm1.*(z(i+1) - z(i)).^n;                Smax = abs((z(i+1)-z(i))/dx);			end            for i = 2:Maxi-1                if m==0                    if rflag==2                        qs(i) = k1xm(i)./2.*(z(i+1) - z(i-1)).^n*(1/(1-(abs(z(i+1) - z(i-1))/Scdx)^2));                        Smax = max(Smax,abs((z(i+1)-z(i-1))/(2*dx)));                    else				        qs(i) = k1xm(i)./2.*(z(i+1) - z(i-1)).^n;                        Smax = max(Smax,abs((z(i+1)-z(i-1))/(2*dx)));                    end                else                    qs(i) = k1xm(i).*(z(i+1) - z(i)).^n;                    Smax = max(Smax,abs((z(i+1)-z(i-1))/(2*dx)));                end			end			i = Maxi;            if rflag==2                qs(i) = k1xmm.*(z(i) - z(i-1)).^n*(1/(1-(abs(z(i) - z(i-1))/(Scdx./2))^2));                Smax = max(Smax,abs((z(i)-z(i-1))/dx));            else      		    qs(i) = k1xmm.*(z(i) - z(i-1)).^n;                Smax = max(Smax,abs((z(i)-z(i-1))/dx));            end%				elseif wflag==2			i=1;				W(i)=Ws.*exp(-1.*Wd.*h(i));				if m==0					qs(i) = k1.*(z(i+1) - z(i)).^n;                    qs(i) = min(qs(i),(W(i) + h(i)./dt).*dx);                    Smax = abs((z(i+1)-z(i))/dx);				else					qs(i) = k1xm1.*(z(i+1) - z(i)).^n;                    qs(i) = min(qs(i),(W(i) + h(i)./dt).*dx);                    Smax = abs((z(i+1)-z(i))/dx);				end%			for i = 2:Maxi-1					W(i)=Ws.*exp(-1.*Wd.*h(i));					qs(i) = k1xm(i)./2.*(z(i+1) - z(i-1)).^n;                    qs(i) = min(qs(i),(W(i) + h(i)./dt).*dx+qs(i-1));                    Smax = max(Smax,abs((z(i+1)-z(i-1))/(2*dx)));			end%			i = Maxi;						W(i)=Ws.*exp(-1.*Wd.*h(i));						qs(i) = k1xmm.*(z(i) - z(i-1)).^n;                    qs(i) = min(qs(i),(W(i) + h(i)./dt).*dx+qs(i-1));                    Smax = max(Smax,abs((z(i)-z(i-1))/dx));		end% 					qs=abs(qs);%% now calc dz/dt based on qs(i), again with a no-flow BC at ridge (i=1)%		i=1;			tempz = z(i);			z(i) = z(i) - k3.*(qs(i));			if wflag==2				b(i) = -1.*dt.*W(i) + b(i);				if z(i)<b(i)					i                    z(i)                    b(i)				end				h(i)=z(i)-b(i);			end			dzdt(t)= (tempz-z(i))/dt;            dzdti(i) = (tempz-z(i))/dt;			n_dzdt(t) = dzdt(t)/E;			time(t)=t*dt;%					for i = 2:Maxi-2            tempz=z(i);			z(i) = z(i) - (k3./2).*(qs(i+1) - qs(i-1));%            z(i) = z(i) - (k3).*(qs(i+1) - qs(i));            dzdti(i) = (tempz-z(i))/dt;			if wflag==2				b(i) = -1.*dt.*W(i) + b(i);				if z(i)<b(i)					i                    z(i)                    b(i)				end				h(i)=z(i)-b(i);			end		end%		i=Maxi-1;            tempz=z(i);			z(i) = z(i) - k3.*(qs(i) - qs(i-1));            dzdti(i) = (tempz-z(i))/dt;			if wflag==2				b(i) = -1.*dt.*W(i) + b(i);				if z(i)<b(i)					i                    z(i)                    b(i)				end				h(i)=z(i)-b(i);			end%% calc last point applying appropriate BC as specified by bcflag% note if bcflag = 1, z(Maxi) is constant, so do nothing%		i=Maxi;		if bcflag==2            tempz=z(i);			z(i) = z(i) - E.*dt;            dzdti(i) = (tempz-z(i))/dt;			if wflag==2				b(i) = -1.*dt.*W(i) + b(i);				if z(i)<b(i)					i                    z(i)                    b(i)				end				h(i)=z(i)-b(i);			end		elseif bcflag==1            dzdti(i) = 0;			if wflag==2				b(i) = -1.*dt.*W(i) + b(i);				if z(i)<b(i)					i                    z(i)                    b(i)				end				h(i)=z(i)-b(i);			end		elseif bcflag==3            tempz=z(i);			z(i) = z(i) + (k3./2).*(qs(i-1));            dzdti(i) = (tempz-z(i))/dt;			if wflag==2				b(i) = -1.*dt.*W(i) + b(i);				if z(i)<b(i)					i                    z(i)                    b(i)				end				h(i)=z(i)-b(i);			end      	end%% plot z, b, slope, curvature at appropriate times.  use "hold on" to avoid erasing previous plots%		if rem(t,tplot)==0%           % calc slope and curvature of each point, this time step%        i=1;        s(i) = -1*(z(i+1) - z(i))/dx;        plot_s(i) = s(i);        for i = 2:Maxi-1            s(i) = -1*(z(i+1) - z(i-1))/(2*dx);            plot_s(i) = s(i);        end        i=Maxi;        s(i) = -1*(z(i) - z(i-1))/(dx);%               i=1;        cv(i) = -1*(s(i+1) - s(i))/dx;        for i = 2:Maxi-2            cv(i) = -1*(s(i+1) - s(i-1))/(2*dx);        end        i=Maxi-1;        cv(i) = -1*(s(i) - s(i-2))/(2*dx);%        figure(4)        plot (plot_s,cv,'g')        xlabel('local slope (m/m)')        ylabel('local curvature')        title('Slope-curvature Plot')        hold on%			if wflag==1				figure(1)                plot (ax,z,'g')			elseif wflag==2				figure(1)                plot (ax,z,'g',ax,b,'c')				title (['Ws=',num2str(Ws),' Wd=',num2str(Wd),' timeyr=',num2str(timeyr),' m=',num2str(m),' n=',num2str(n),' k=',num2str(k),' bc=',num2str(bcflag),' E=',num2str(E)])                figure(3)                plot(h,dzdti,'g')                hold on                xlabel('soil thickness (m)')                ylabel('dzdt')                title('Soil thickness and erosion rate (curvature)')                figure(5)                plot(ax,h,'g')            end		end%% end time loop -- repeat for all nsteps%	end%%% calculate steady state profile for comparison, linear diffusion case and% m=2, n=2 sheetwash case%plot_ss = 0;z_ss = zeros(size(z));if m==0 & n==1 & bcflag==2    z0 = z(1)    z_ss = z0 - E*ax.^2./(2*k);    z_ss = z_ss - (z_ss(Maxi)-z(Maxi));    z_ss(1)    plot_ss = 1;elseif m==2 & n==2 & bcflag==2        z0=z(1)        z_ss = z0 - 2*sqrt(E/k).*ax.^0.5;        z_ss = z_ss - (z_ss(Maxi)-z(Maxi));        z_ss(1)        plot_ss = 1;end    if plot_ss    figure(1)    hold on    plot (ax,z_ss,'k+')end    figure(1)    plot(ax,z,'r')    if wflag==2        plot(ax,b,'Color',[0.4,0.4,0.4])    end%    % for Pierce and Colman test, calc effective diffusivity constant from Smax% -- which holds the maximum value from the last time step% using analytical result in Pierce and Colman paper (assuming initial% scarp gradient = 0.8 = tan_alpha)%years = max(time)max_slope = Smaxif rflag==2    Keff = (scarp_h/(4*sqrt(max(time))*Si*erfinv(Smax/Si)))^2end%% plot erosion rate at divide as a function of time in a second figure%	figure(2)	plot(time,n_dzdt,'k')	xlabel('time in years (t * dt)')	ylabel('dzdt/E ')	title([ 'time to steady state: E =' num2str(E)])    if wflag == 2        figure(3)        plot(h,dzdti,'r')        spro=Ws*exp(-Wd*h);        plot(h,spro,'Color',[0.3,0.3,0.3])        figure(5)        plot(ax,h,'r')        if plot_ss            h_ss = -(1/Wd)*log(E/Ws);            plot(ax,h_ss,'k+')            hold off            figure(3)            plot(h_ss,E,'k+')        end        hold off    end % % plot the final time step of curvature vs slope in red %    figure(4)    plot (plot_s,cv,'r')    if plot_ss        if m==0        cv_ss = -E/k;        plot (plot_s,cv_ss,'k+')        end    end %	z=z; % write final value dzdt/E to screen    norm_erosion_rate = n_dzdt(t)